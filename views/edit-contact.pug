extends layout

block main
	head
		title Edit Contact
	.container
		.row.header(style='text-align: center;')
			h2.addcontact
				small 
				| #{contact.firstname} #{contact.lastname}
		.row.body
			form#add-contact-form(action=`/contacts/${contact.id}/edit` method="post")
				ul
					li
						p
							label(for='firstname')
								| First name 
								span.req *
							input(type="text"
										name="firstName"
										value=`${contact.firstname}`)
						p
							label(for='lastname')
								| Last name 
								span.req *
							input(type="text"
										name="lastName"
										value=`${contact.lastname}`)
						p
							label(for='phoneNumber')
								| Phone Number
								span.req *
							input(type="text"
										name="phoneNumber"
										value=`${contact.phonenumber}`)
						p
							label(for='birthday') Birthday
								span.req *
							input(name="birthday" 
										type='text' 
										onfocus="(this.type='date')" 
										aria-labelledby='dateformat'
										value=`${contact.birthday.toLocaleDateString()}`
										placeholder= contact.birthday.toLocaleDateString()
										min='1900-01-01' 
										max= `${new Date().toISOString().split('T')[0]}`
										)
						p
							label(for='dob') Relationship 
							select(type="text" id="category" name="category" )
								option(value=contact.category default='')= contact.category
								option(value='Friend') Friend
								option(value='Family') Family
								option(value='Co-Worker') Co-Worker
								option(value='Acquaintance') Acquaintance
								option(value='Other') Other
					li
						a.btn.btn-cancel(href='/contacts') Cancel
						input.btn.btn-submit(type='submit' value='Save')
		script.
			"use strict";
			(() => {
			const modified_inputs = new Set;
			const defaultValue = "defaultValue";
			// store default values
			addEventListener("beforeinput", (evt) => {
					const target = evt.target;
					if (!(defaultValue in target || defaultValue in target.dataset)) {
							target.dataset[defaultValue] = ("" + (target.value || target.textContent)).trim();
					}
			});
			// detect input modifications
			addEventListener("input", (evt) => {
					const target = evt.target;
					let original;
					if (defaultValue in target) {
							original = target[defaultValue];
					} else {
							original = target.dataset[defaultValue];
					}
					if (original !== ("" + (target.value || target.textContent)).trim()) {
							if (!modified_inputs.has(target)) {
									modified_inputs.add(target);
							}
					} else if (modified_inputs.has(target)) {
							modified_inputs.delete(target);
					}
			});
			// clear modified inputs upon form submission
			addEventListener("submit", (evt) => {
					modified_inputs.clear();
					// to prevent the warning from happening, it is advisable
					// that you clear your form controls back to their default
					// state with evt.target.reset() or form.reset() after submission
			});
			// warn before closing if any inputs are modified
			addEventListener("beforeunload", (evt) => {
					if (modified_inputs.size) {
							const unsaved_changes_warning = "Changes you made may not be saved.";
							evt.returnValue = unsaved_changes_warning;
							return unsaved_changes_warning;
					}
			});
			})();